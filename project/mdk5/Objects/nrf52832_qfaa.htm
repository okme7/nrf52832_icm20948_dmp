<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\nrf52832_qfaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\nrf52832_qfaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Sep 27 11:23:38 2023
<BR><P>
<H3>Maximum Stack Usage =        616 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SPI_Flash_Init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[cf]">nrf_log_frontend_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">nrf_log_frontend_std_0</a><BR>
 <LI><a href="#[e1]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e1]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">ICM_20948_read_SPI</a> from icm_20948.o(i.ICM_20948_read_SPI) referenced from icm_20948.o(i.ICM_20948_SPI_begin)
 <LI><a href="#[33]">ICM_20948_write_SPI</a> from icm_20948.o(i.ICM_20948_write_SPI) referenced from icm_20948.o(i.ICM_20948_SPI_begin)
 <LI><a href="#[29]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">RADIO_IRQHandler</a> from nrf_esb.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">RTC1_IRQHandler</a> from drv_rtc.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from nrfx_spim.o(.constdata)
 <LI><a href="#[e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SWI0_EGU0_IRQHandler</a> from nrf_esb.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[17]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">TIMER0_IRQHandler</a> from nrfx_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">TIMER3_IRQHandler</a> from nrf_esb.o(i.TIMER3_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[36]">fputc</a> from retarget.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[30]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3b]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[3a]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[39]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[38]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[35]">spi_event_handler</a> from w25q128.o(i.spi_event_handler) referenced from w25q128.o(i.SPI_Flash_Init)
 <LI><a href="#[37]">spim_evt_handler</a> from nrf_drv_spi.o(i.spim_evt_handler) referenced from nrf_drv_spi.o(i.nrf_drv_spi_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[50]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[147]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[148]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[149]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[107]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[108]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[106]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[14c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[105]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[10a]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[14d]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[14e]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[14f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[150]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[145]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
</UL>

<P><STRONG><a name="[ef]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[157]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[159]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[46]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4f]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[15a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GPIOTE_IRQHandler &rArr; port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ICM_20948_SPI_begin</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_SPI_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ICM_20948_SPI_begin &rArr; ICM_20948_startupDefault &rArr; ICM_20948_startupMagnetometer &rArr; ICM_20948_magWhoIAm &rArr; ICM_20948_readMag &rArr; ICM_20948_i2cMasterSingleR &rArr; ICM_20948_i2c_master_single_r &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serif_t_initialize
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>ICM_20948_enableDLPF</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_enableDLPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ICM_20948_enableDLPF &rArr; ICM_20948_enable_dlpf &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_dlpf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>

<P><STRONG><a name="[5b]"></a>ICM_20948_enableDMP</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_enableDMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM_20948_enableDMP &rArr; ICM_20948_enable_DMP &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_DMP
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>ICM_20948_enableDMPSensor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_enableDMPSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ICM_20948_enableDMPSensor &rArr; inv_icm20948_enable_dmp_sensor &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_dmp_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>ICM_20948_enableFIFO</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_enableFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM_20948_enableFIFO &rArr; ICM_20948_enable_FIFO &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>ICM_20948_enable_DMP</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_enable_DMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_enable_DMP &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableDMP
</UL>

<P><STRONG><a name="[60]"></a>ICM_20948_enable_FIFO</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_enable_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_enable_FIFO &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableFIFO
</UL>

<P><STRONG><a name="[5a]"></a>ICM_20948_enable_dlpf</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_enable_dlpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_enable_dlpf &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableDLPF
</UL>

<P><STRONG><a name="[62]"></a>ICM_20948_execute_r</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_execute_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sw_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sleep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_sample_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_full_scale
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_dlpf_cfg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_clock_source
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_reset_FIFO
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_reset_DMP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_low_power
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_int_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_reset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_passthrough
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_controller_periph4_txn
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_get_FIFO_count
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_dlpf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_FIFO
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_DMP
</UL>

<P><STRONG><a name="[63]"></a>ICM_20948_execute_w</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_execute_w))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ICM_20948_execute_w
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sw_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sleep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_sample_rate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_sample_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_full_scale
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_dmp_start_address
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_dlpf_cfg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_clock_source
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_reset_FIFO
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_reset_DMP
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_low_power
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_int_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_reset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_passthrough
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_controller_periph4_txn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_controller_configure_peripheral
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_dlpf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_FIFO
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_DMP
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_write
</UL>

<P><STRONG><a name="[64]"></a>ICM_20948_firmware_load</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, icm_20948_c.o(i.ICM_20948_firmware_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ICM_20948_firmware_load &rArr; inv_icm20948_firmware_load &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_loadDMPFirmware
</UL>

<P><STRONG><a name="[66]"></a>ICM_20948_get_FIFO_count</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_get_FIFO_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_get_FIFO_count &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_dmp_data
</UL>

<P><STRONG><a name="[67]"></a>ICM_20948_i2cControllerConfigurePeripheral</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, icm_20948.o(i.ICM_20948_i2cControllerConfigurePeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ICM_20948_i2cControllerConfigurePeripheral &rArr; ICM_20948_i2c_controller_configure_peripheral &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_controller_configure_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupMagnetometer
</UL>

<P><STRONG><a name="[69]"></a>ICM_20948_i2cMasterEnable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_i2cMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ICM_20948_i2cMasterEnable &rArr; ICM_20948_i2c_master_enable &rArr; ICM_20948_i2c_master_passthrough &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupMagnetometer
</UL>

<P><STRONG><a name="[6b]"></a>ICM_20948_i2cMasterPassthrough</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_i2cMasterPassthrough))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM_20948_i2cMasterPassthrough &rArr; ICM_20948_i2c_master_passthrough &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_passthrough
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupMagnetometer
</UL>

<P><STRONG><a name="[6d]"></a>ICM_20948_i2cMasterReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_i2cMasterReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_i2cMasterReset &rArr; ICM_20948_i2c_master_reset &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupMagnetometer
</UL>

<P><STRONG><a name="[6f]"></a>ICM_20948_i2cMasterSingleR</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_i2cMasterSingleR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ICM_20948_i2cMasterSingleR &rArr; ICM_20948_i2c_master_single_r &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_single_r
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_readMag
</UL>

<P><STRONG><a name="[71]"></a>ICM_20948_i2cMasterSingleW</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, icm_20948.o(i.ICM_20948_i2cMasterSingleW))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ICM_20948_i2cMasterSingleW &rArr; ICM_20948_i2c_master_single_w &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_single_w
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_writeMag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_resetMag
</UL>

<P><STRONG><a name="[68]"></a>ICM_20948_i2c_controller_configure_peripheral</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, icm_20948_c.o(i.ICM_20948_i2c_controller_configure_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ICM_20948_i2c_controller_configure_peripheral &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cControllerConfigurePeripheral
</UL>

<P><STRONG><a name="[73]"></a>ICM_20948_i2c_controller_periph4_txn</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, icm_20948_c.o(i.ICM_20948_i2c_controller_periph4_txn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_single_w
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_single_r
</UL>

<P><STRONG><a name="[6a]"></a>ICM_20948_i2c_master_enable</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_i2c_master_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ICM_20948_i2c_master_enable &rArr; ICM_20948_i2c_master_passthrough &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_passthrough
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterEnable
</UL>

<P><STRONG><a name="[6c]"></a>ICM_20948_i2c_master_passthrough</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_i2c_master_passthrough))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_i2c_master_passthrough &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterPassthrough
</UL>

<P><STRONG><a name="[6e]"></a>ICM_20948_i2c_master_reset</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, icm_20948_c.o(i.ICM_20948_i2c_master_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ICM_20948_i2c_master_reset &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterReset
</UL>

<P><STRONG><a name="[70]"></a>ICM_20948_i2c_master_single_r</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, icm_20948_c.o(i.ICM_20948_i2c_master_single_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ICM_20948_i2c_master_single_r &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_controller_periph4_txn
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterSingleR
</UL>

<P><STRONG><a name="[72]"></a>ICM_20948_i2c_master_single_w</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, icm_20948_c.o(i.ICM_20948_i2c_master_single_w))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ICM_20948_i2c_master_single_w &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_controller_periph4_txn
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterSingleW
</UL>

<P><STRONG><a name="[74]"></a>ICM_20948_initializeDMP</STRONG> (Thumb, 1148 bytes, Stack size 120 bytes, icm_20948.o(i.ICM_20948_initializeDMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ICM_20948_initializeDMP &rArr; ICM_20948_setGyroSF &rArr; inv_icm20948_set_gyro_sf &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_resetFIFO
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableFIFO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableDMP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_writeDMPmems
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setSampleRate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setSampleMode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setGyroSF
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setFullScale
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setDMPstartAddress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setClockSource
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setBank
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_loadDMPFirmware
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_intEnableRawDataReady
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cControllerConfigurePeripheral
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableDLPF
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>ICM_20948_intEnableRawDataReady</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_intEnableRawDataReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ICM_20948_intEnableRawDataReady &rArr; ICM_20948_int_enable &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
</UL>

<P><STRONG><a name="[81]"></a>ICM_20948_int_enable</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, icm_20948_c.o(i.ICM_20948_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ICM_20948_int_enable &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_intEnableRawDataReady
</UL>

<P><STRONG><a name="[7e]"></a>ICM_20948_loadDMPFirmware</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_loadDMPFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ICM_20948_loadDMPFirmware &rArr; ICM_20948_firmware_load &rArr; inv_icm20948_firmware_load &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_firmware_load
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
</UL>

<P><STRONG><a name="[82]"></a>ICM_20948_lowPower</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_lowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM_20948_lowPower &rArr; ICM_20948_low_power &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_low_power
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>

<P><STRONG><a name="[83]"></a>ICM_20948_low_power</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_low_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_low_power &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_dmp_sensor_period
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_dmp_sensor
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_lowPower
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>

<P><STRONG><a name="[84]"></a>ICM_20948_magWhoIAm</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_magWhoIAm))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ICM_20948_magWhoIAm &rArr; ICM_20948_readMag &rArr; ICM_20948_i2cMasterSingleR &rArr; ICM_20948_i2c_master_single_r &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_readMag
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupMagnetometer
</UL>

<P><STRONG><a name="[86]"></a>ICM_20948_readDMPdataFromFIFO</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_readDMPdataFromFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ICM_20948_readDMPdataFromFIFO &rArr; inv_icm20948_read_dmp_data &rArr; ICM_20948_read_FIFO &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_dmp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>ICM_20948_readMag</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_readMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ICM_20948_readMag &rArr; ICM_20948_i2cMasterSingleR &rArr; ICM_20948_i2c_master_single_r &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterSingleR
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_magWhoIAm
</UL>

<P><STRONG><a name="[88]"></a>ICM_20948_read_FIFO</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_read_FIFO &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_dmp_data
</UL>

<P><STRONG><a name="[34]"></a>ICM_20948_read_SPI</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, icm_20948.o(i.ICM_20948_read_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ICM_20948_read_SPI &rArr; read_multiple_spi &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm_20948.o(i.ICM_20948_SPI_begin)
</UL>
<P><STRONG><a name="[8a]"></a>ICM_20948_resetDMP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_resetDMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_resetDMP &rArr; ICM_20948_reset_DMP &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_reset_DMP
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>ICM_20948_resetFIFO</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_resetFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_resetFIFO &rArr; ICM_20948_reset_FIFO &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_reset_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>ICM_20948_resetMag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_resetMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ICM_20948_resetMag &rArr; ICM_20948_i2cMasterSingleW &rArr; ICM_20948_i2c_master_single_w &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterSingleW
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupMagnetometer
</UL>

<P><STRONG><a name="[8b]"></a>ICM_20948_reset_DMP</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, icm_20948_c.o(i.ICM_20948_reset_DMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ICM_20948_reset_DMP &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_resetDMP
</UL>

<P><STRONG><a name="[8c]"></a>ICM_20948_reset_FIFO</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, icm_20948_c.o(i.ICM_20948_reset_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ICM_20948_reset_FIFO &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_resetFIFO
</UL>

<P><STRONG><a name="[75]"></a>ICM_20948_setBank</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_setBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ICM_20948_setBank &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
</UL>

<P><STRONG><a name="[77]"></a>ICM_20948_setClockSource</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_setClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM_20948_setClockSource &rArr; ICM_20948_set_clock_source &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_clock_source
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
</UL>

<P><STRONG><a name="[8f]"></a>ICM_20948_setDLPFcfg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_setDLPFcfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ICM_20948_setDLPFcfg &rArr; ICM_20948_set_dlpf_cfg &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_dlpf_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>

<P><STRONG><a name="[91]"></a>ICM_20948_setDMPODRrate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_setDMPODRrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ICM_20948_setDMPODRrate &rArr; inv_icm20948_set_dmp_sensor_period &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_dmp_sensor_period
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>ICM_20948_setDMPstartAddress</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_setDMPstartAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM_20948_setDMPstartAddress &rArr; ICM_20948_set_dmp_start_address &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_dmp_start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
</UL>

<P><STRONG><a name="[79]"></a>ICM_20948_setFullScale</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_setFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ICM_20948_setFullScale &rArr; ICM_20948_set_full_scale &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_full_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>

<P><STRONG><a name="[80]"></a>ICM_20948_setGyroSF</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_setGyroSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ICM_20948_setGyroSF &rArr; inv_icm20948_set_gyro_sf &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
</UL>

<P><STRONG><a name="[78]"></a>ICM_20948_setSampleMode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_setSampleMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ICM_20948_setSampleMode &rArr; ICM_20948_set_sample_mode &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_sample_mode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>

<P><STRONG><a name="[7c]"></a>ICM_20948_setSampleRate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_setSampleRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ICM_20948_setSampleRate &rArr; ICM_20948_set_sample_rate &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_sample_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
</UL>

<P><STRONG><a name="[61]"></a>ICM_20948_set_bank</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, icm_20948_c.o(i.ICM_20948_set_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sw_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sleep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_sample_rate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_sample_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_full_scale
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_dmp_start_address
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_dlpf_cfg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_clock_source
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_reset_FIFO
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_reset_DMP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_low_power
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_int_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_reset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_passthrough
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_master_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_controller_periph4_txn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2c_controller_configure_peripheral
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_get_FIFO_count
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_dlpf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_FIFO
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enable_DMP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setBank
</UL>

<P><STRONG><a name="[8e]"></a>ICM_20948_set_clock_source</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_set_clock_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_set_clock_source &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setClockSource
</UL>

<P><STRONG><a name="[90]"></a>ICM_20948_set_dlpf_cfg</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, icm_20948_c.o(i.ICM_20948_set_dlpf_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM_20948_set_dlpf_cfg &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setDLPFcfg
</UL>

<P><STRONG><a name="[93]"></a>ICM_20948_set_dmp_start_address</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_set_dmp_start_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_set_dmp_start_address &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setDMPstartAddress
</UL>

<P><STRONG><a name="[94]"></a>ICM_20948_set_full_scale</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, icm_20948_c.o(i.ICM_20948_set_full_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM_20948_set_full_scale &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setFullScale
</UL>

<P><STRONG><a name="[96]"></a>ICM_20948_set_sample_mode</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_set_sample_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_set_sample_mode &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setSampleMode
</UL>

<P><STRONG><a name="[98]"></a>ICM_20948_set_sample_rate</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, icm_20948_c.o(i.ICM_20948_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ICM_20948_set_sample_rate &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setSampleRate
</UL>

<P><STRONG><a name="[99]"></a>ICM_20948_sleep</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, icm_20948_c.o(i.ICM_20948_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_sleep &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_dmp_sensor_period
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_dmp_sensor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sleep_
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>

<P><STRONG><a name="[9a]"></a>ICM_20948_sleep_</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_sleep_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM_20948_sleep_ &rArr; ICM_20948_sleep &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>

<P><STRONG><a name="[58]"></a>ICM_20948_startupDefault</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, icm_20948.o(i.ICM_20948_startupDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ICM_20948_startupDefault &rArr; ICM_20948_startupMagnetometer &rArr; ICM_20948_magWhoIAm &rArr; ICM_20948_readMag &rArr; ICM_20948_i2cMasterSingleR &rArr; ICM_20948_i2c_master_single_r &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_swReset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupMagnetometer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sleep_
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setSampleMode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setFullScale
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setDLPFcfg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_lowPower
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableDLPF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_SPI_begin
</UL>

<P><STRONG><a name="[9d]"></a>ICM_20948_startupMagnetometer</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, icm_20948.o(i.ICM_20948_startupMagnetometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ICM_20948_startupMagnetometer &rArr; ICM_20948_magWhoIAm &rArr; ICM_20948_readMag &rArr; ICM_20948_i2cMasterSingleR &rArr; ICM_20948_i2c_master_single_r &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_writeMag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_resetMag
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_magWhoIAm
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterReset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterPassthrough
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterEnable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cControllerConfigurePeripheral
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>

<P><STRONG><a name="[9b]"></a>ICM_20948_swReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, icm_20948.o(i.ICM_20948_swReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_20948_swReset &rArr; ICM_20948_sw_reset &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>

<P><STRONG><a name="[9f]"></a>ICM_20948_sw_reset</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, icm_20948_c.o(i.ICM_20948_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ICM_20948_sw_reset &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_swReset
</UL>

<P><STRONG><a name="[76]"></a>ICM_20948_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ICM_20948_write &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
</UL>

<P><STRONG><a name="[7f]"></a>ICM_20948_writeDMPmems</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_writeDMPmems))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ICM_20948_writeDMPmems &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
</UL>

<P><STRONG><a name="[9e]"></a>ICM_20948_writeMag</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, icm_20948.o(i.ICM_20948_writeMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ICM_20948_writeMag &rArr; ICM_20948_i2cMasterSingleW &rArr; ICM_20948_i2c_master_single_w &rArr; ICM_20948_i2c_controller_periph4_txn &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_i2cMasterSingleW
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupMagnetometer
</UL>

<P><STRONG><a name="[33]"></a>ICM_20948_write_SPI</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, icm_20948.o(i.ICM_20948_write_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ICM_20948_write_SPI &rArr; write_multiple_spi &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_multiple_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm_20948.o(i.ICM_20948_SPI_begin)
</UL>
<P><STRONG><a name="[b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, nrf_esb.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RADIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_rtc.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[e]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_spim.o(.constdata)
<LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SPI_Flash_Init</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, w25q128.o(i.SPI_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SPI_Flash_Init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nrf_esb.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>Serif_t_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm_20948.o(i.Serif_t_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_SPI_begin
</UL>

<P><STRONG><a name="[ba]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 596 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_136
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_12
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_108
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_66
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_57
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_37
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_36
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_32
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_31
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_182
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_16
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_esb.o(i.TIMER3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15d]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[9c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
</UL>

<P><STRONG><a name="[c3]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[bf]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[c9]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[c0]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[ca]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[c2]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[c4]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[15e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[160]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c1]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[cd]"></a>app_error_fault_handler</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[ad]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_multiple_spi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_spi
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[d1]"></a>app_fifo_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[d4]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[d6]"></a>app_uart_put</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[da]"></a>app_util_critical_region_enter</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[dc]"></a>app_util_critical_region_exit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[db]"></a>app_util_disable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[dd]"></a>app_util_enable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[cb]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[123]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[fb]"></a>clock_initialization</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.clock_initialization))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[36]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fputc &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[f1]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
</UL>

<P><STRONG><a name="[5e]"></a>inv_icm20948_enable_dmp_sensor</STRONG> (Thumb, 596 bytes, Stack size 56 bytes, icm_20948_c.o(i.inv_icm20948_enable_dmp_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_icm20948_enable_dmp_sensor &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sleep
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_low_power
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_type_2_android_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableDMPSensor
</UL>

<P><STRONG><a name="[65]"></a>inv_icm20948_firmware_load</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, icm_20948_c.o(i.inv_icm20948_firmware_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_icm20948_firmware_load &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sleep
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_low_power
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_firmware_load
</UL>

<P><STRONG><a name="[87]"></a>inv_icm20948_read_dmp_data</STRONG> (Thumb, 2072 bytes, Stack size 48 bytes, icm_20948_c.o(i.inv_icm20948_read_dmp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_icm20948_read_dmp_data &rArr; ICM_20948_read_FIFO &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_read_FIFO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_get_FIFO_count
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_readDMPdataFromFIFO
</UL>

<P><STRONG><a name="[ee]"></a>inv_icm20948_read_mems</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, icm_20948_c.o(i.inv_icm20948_read_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_icm20948_read_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>

<P><STRONG><a name="[92]"></a>inv_icm20948_set_dmp_sensor_period</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, icm_20948_c.o(i.inv_icm20948_set_dmp_sensor_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_icm20948_set_dmp_sensor_period &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_sleep
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_low_power
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setDMPODRrate
</UL>

<P><STRONG><a name="[95]"></a>inv_icm20948_set_gyro_sf</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, icm_20948_c.o(i.inv_icm20948_set_gyro_sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_icm20948_set_gyro_sf &rArr; inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_r
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setGyroSF
</UL>

<P><STRONG><a name="[a0]"></a>inv_icm20948_write_mems</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, icm_20948_c.o(i.inv_icm20948_write_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = inv_icm20948_write_mems &rArr; ICM_20948_set_bank &rArr; ICM_20948_execute_w
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_set_bank
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_execute_w
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_dmp_sensor_period
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_dmp_sensor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_writeDMPmems
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 1362 bytes, Stack size 304 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = main &rArr; SPI_Flash_Init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_configure
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setDMPODRrate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_resetFIFO
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_resetDMP
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_readDMPdataFromFIFO
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_initializeDMP
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableFIFO
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableDMPSensor
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_enableDMP
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_SPI_begin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_initialization
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_toggle
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f0]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
</UL>

<P><STRONG><a name="[fa]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[f8]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[df]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[103]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[e6]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[104]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[109]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[10b]"></a>nrf_balloc_alloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_idx2block
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[10d]"></a>nrf_balloc_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_block2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[ac]"></a>nrf_drv_spi_init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[116]"></a>nrf_fprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[e2]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[117]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[11c]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[13e]"></a>nrf_log_color_id_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[cf]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 748 bytes, Stack size 80 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[d0]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[121]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[102]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[12a]"></a>nrf_log_module_name_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[ce]"></a>nrf_log_panic</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[120]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[124]"></a>nrf_memobj_alloc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[12b]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[11d]"></a>nrf_memobj_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[122]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[11f]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_read &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[125]"></a>nrf_memobj_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[12c]"></a>nrfx_prs_acquire</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[10f]"></a>nrfx_spim_init</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, nrfx_spim.o(i.nrfx_spim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[111]"></a>nrfx_spim_xfer</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nrfx_spim.o(i.nrfx_spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[113]"></a>nrfx_uart_tx</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[d8]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[112]"></a>nrfx_uarte_tx</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[d7]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[fc]"></a>radio_configure</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, radio_config.o(i.radio_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = radio_configure &rArr; bytewise_bitswap &rArr; swap_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_bits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bitswap
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>read_multiple_spi</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, w25q128.o(i.read_multiple_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = read_multiple_spi &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_read_SPI
</UL>

<P><STRONG><a name="[ed]"></a>sensor_type_2_android_sensor</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, icm_20948_c.o(i.sensor_type_2_android_sensor))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_dmp_sensor
</UL>

<P><STRONG><a name="[35]"></a>spi_event_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w25q128.o(i.spi_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> w25q128.o(i.SPI_Flash_Init)
</UL>
<P><STRONG><a name="[c7]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[a1]"></a>write_multiple_spi</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, w25q128.o(i.write_multiple_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = write_multiple_spi &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_write_SPI
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ff]"></a>nrf_gpio_pin_toggle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, w25q128.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_multiple_spi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_spi
</UL>

<P><STRONG><a name="[140]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, w25q128.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_multiple_spi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_spi
</UL>

<P><STRONG><a name="[ab]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, w25q128.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_multiple_spi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_spi
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[97]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, icm_20948.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupMagnetometer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_startupDefault
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_setSampleMode
</UL>

<P><STRONG><a name="[12d]"></a>prs_box_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[134]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[130]"></a>nrf_uart_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
</UL>

<P><STRONG><a name="[131]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[133]"></a>tx_blocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[132]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[138]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[136]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[137]"></a>nrf_uarte_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[135]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[a2]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[13d]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[f7]"></a>latch_pending_read_and_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.latch_pending_read_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[13a]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[13c]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[53]"></a>nrf_gpio_latches_read_and_clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_latches_read_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
</UL>

<P><STRONG><a name="[11b]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[52]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>port_event_handle</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.port_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_pin_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>port_handler_pin_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_pin_get))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[13b]"></a>port_handler_polarity_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_polarity_get))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[e8]"></a>finish_transfer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrfx_spim.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[a9]"></a>irq_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_spim.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = irq_handler &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrfx_spim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[119]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[e9]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[ea]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[f2]"></a>nrf_spim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[f3]"></a>nrf_spim_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_spim.o(i.nrf_spim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_spim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[143]"></a>nrf_spim_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[142]"></a>nrf_spim_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[12e]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[141]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[12f]"></a>spim_xfer</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, nrfx_spim.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spim_xfer &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[37]"></a>spim_evt_handler</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.spim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi.o(i.nrf_drv_spi_init)
</UL>
<P><STRONG><a name="[bb]"></a>irq_handler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nrfx_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[f5]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[f6]"></a>nrf_timer_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[e3]"></a>bytewise_bitswap</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, radio_config.o(i.bytewise_bitswap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bytewise_bitswap &rArr; swap_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_configure
</UL>

<P><STRONG><a name="[e4]"></a>swap_bits</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio_config.o(i.swap_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_configure
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bitswap
</UL>

<P><STRONG><a name="[e1]"></a>buffer_add</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[eb]"></a>int_print</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[118]"></a>string_print</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nrf_fprintf_format.o(i.string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = string_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[ec]"></a>unsigned_print</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[100]"></a>memobj_op</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[10e]"></a>nrf_balloc_block2idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_block2idx))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>

<P><STRONG><a name="[10c]"></a>nrf_balloc_idx2block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_idx2block))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[d3]"></a>fifo_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[d2]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[e7]"></a>fifo_peek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_fifo.o(i.fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[d5]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[d9]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[114]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, nrf_esb.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>

<P><STRONG><a name="[115]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_esb.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>

<P><STRONG><a name="[ae]"></a>nrf_esb_get_clear_interrupts</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_get_clear_interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[3b]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>serial_tx</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[de]"></a>buf_prealloc</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[e5]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>

<P><STRONG><a name="[f9]"></a>invalid_packets_omit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[e0]"></a>log_skip</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[101]"></a>module_idx_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[144]"></a>std_header_set</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std_header_set &rArr; dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[126]"></a>std_n</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[129]"></a>postfix_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[127]"></a>prefix_process</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[13f]"></a>timestamp_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_str_formatter.o(i.timestamp_print))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[a6]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[a8]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[a7]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[b7]"></a>nrf52_errata_108</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_108))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[af]"></a>nrf52_errata_12</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_12))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b8]"></a>nrf52_errata_136</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b0]"></a>nrf52_errata_16</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b9]"></a>nrf52_errata_182</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_182))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b1]"></a>nrf52_errata_31</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b2]"></a>nrf52_errata_32</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b3]"></a>nrf52_errata_36</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b4]"></a>nrf52_errata_37</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b5]"></a>nrf52_errata_57</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b6]"></a>nrf52_errata_66</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.nrf52_errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[be]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
